;;;; accounting.lisp

(in-package #:accounting)

;;; "accounting" goes here. Hacks and glory await!

(defclass named-entry ()
  ((name :accessor name :initarg :name)
   )
  )
(defclass account (named-entry)
  ((children :accessor children :initform nil)
   (parent :accessor parent :initform nil :initarg :parent)
   (entries :accessor entries :initform (make-list 0))
   )
  )
(defmethod debitp ((self account))
  (position (char (account-number self) 0) "14")
  )
(defmethod account-named ((self account) name)
  (find-if #'(lambda (acc)
               (equalp name (name acc)))
           (children self)))
(defmethod account-number ((self account))
  (let ((parent (parent self)))
    (if parent
        (let (
              (parent-number (account-number parent))
              )
          (concatenate 'string parent-number
                       (format nil "~vd"
                               (1+ (floor 
                                    (log (number-of-subaccounts parent) 10)))
                               (1+ (position self (children parent))))))
        ""
        )
    )
  )
(defmethod number-of-subaccounts ((self account))
  (length (children self))
  )
(defmethod balance ((self account))
  (let ((debit-account (debitp self))
        (result 0)
        )
    (iter
      (for entry in-sequence (entries self))
      (setf result (funcall
                    (if (lisp-unit:logically-equal debit-account (debitp entry))
                        #'+ #'-)
                    result (amount entry))))
    result)
  )
(defun make-account (&key name parent &allow-other-keys)
  (make-instance 'account :name name :parent parent)
  )
(defmethod initialize-instance ((self account) &key parent &allow-other-keys)
  (call-next-method)
  (if parent
      (add-account-to-parent :account self :parent parent)
    )
  )
(defun add-account-to-parent (&key account parent)
  (setf (children parent)
        (push account (children parent)))
  )
(defun make-ledger (&key name)
  (let ((ledger (make-account :name name :parent nil))
        )
    (iter
      (for cat in-sequence
           (reverse #("Assets" "Liabilities" "Equity" "Income" "Expenses")))
      (make-account :name cat :parent ledger))
    ledger)
  )
(defparameter +line-length+ 80)
(defmethod print-object ((self account) stream)
  (let ((children (children self))
        (name (name self))
        (account-number (account-number self))
        )
    (if children
        (progn
          (format stream "~&~a ~a" account-number  name)
          (iter
           (for child in-sequence children)
           (print-object child stream)))
        (let ((debits nil)
              (credits nil)
              (lines))
          (format stream "~&~a~vt~a~&~a" account-number
                  (floor (/ (- +line-length+ (length name)) 2)) name
                  (make-string +line-length+ :initial-element #\_)
                  )
          (iter
            (for entry in-sequence (entries self))
            (if (debitp entry)
              (setf debits (append debits (list entry)))
              (setf credits (append credits (list entry))))
            )
          (setf lines (max (length debits) (length credits)))
          (iter
            (for line from 1 to lines)
            (format stream "~&~@[~a~]~40t|~@[~a~]" (car debits) (car credits))
            (setf debits (cdr debits))
            (setf credits (cdr credits))
            )
          )
        )
    )
  )
(defclass account-entry ()
  ((amount :accessor amount :initarg :amount)
   (date :accessor date :initarg :date)
   (debitp :accessor debitp :initarg :debitp)
   (legend :accessor legend :initarg :legend)
   )
  )
(defmethod print-object ((self account-entry) stream)
  (format stream "~a ~a ~/wu-decimal:$/"
          (format-timestring nil (date self) :format +rfc3339-format/date-only+)
          (legend self) (amount self))
  )
(defun make-account-entry (&key amount date debitp legend &allow-other-keys)
  (make-instance 'account-entry :amount amount :date date :debitp debitp :legend legend)
  )
(defun post-entry (account entry)
  (setf (entries account) (merge 'list (entries account) (list entry) #'local-time:timestamp< :key #'date))
  )
